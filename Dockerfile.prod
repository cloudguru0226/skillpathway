# Multi-stage production build for LMS
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Build stage
FROM base AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .

# Build the application
RUN npm run build

# Production image
FROM base AS runtime
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 lms

# Copy built application
COPY --from=deps --chown=lms:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=lms:nodejs /app/dist ./dist
COPY --from=build --chown=lms:nodejs /app/package.json ./package.json

# Copy production files
COPY --chown=lms:nodejs ./scripts ./scripts
COPY --chown=lms:nodejs ./migrations ./migrations
COPY --chown=lms:nodejs ./shared ./shared
COPY --chown=lms:nodejs ./server ./server
COPY --chown=lms:nodejs ./drizzle.config.ts ./drizzle.config.ts
COPY --chown=lms:nodejs ./tsconfig.json ./tsconfig.json

# Set correct permissions
RUN chown -R lms:nodejs /app
USER lms

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5000/api/health || exit 1

# Start the application
CMD ["npm", "run", "start:prod"]